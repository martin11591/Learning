<html><head>
<meta http-equiv="content-type" content="text/html; charset=windows-1250">
</head>
<style>
body{margin:0px}
</style>
<body scroll=auto>
<canvas id="canvas" style="width:100%;height:100%">
</canvas>
<span id="info" style="position: absolute; left: 0px; top: 0px"></spam>
<script>
init();
      fps=new Array();
      for (var i=0; i<1000; i++) fps[i]=0;
      fps.sum=function() {
        newSum=0;
        for (var i=0; i<1000; i++) newSum+=this[i];
        return newSum;
      }
      var timer, fpsA=0, fpsB=0, frames=0, avg=0;
function $(id) {return (document.all[id]?document.all[id]:document.getElementById(id))}
function cls(canvas,color) {
if (color==null||color==undefined||color=="") {color="white"}
ctx.fillStyle=color;
ctx.clearRect(0,0,canvas.width,canvas.height);
}
function init() {
this.ctx=canvas.getContext("2d");
canvas.width=document.body.clientWidth;
canvas.height=document.body.clientHeight;
this.w=canvas.width;
this.h=canvas.height;
this.points3D=new Array();
}
function line(x1,y1,x2,y2,color,lineWidth) {
if (x1==null||x1==undefined||isNaN(x1)) {return}
if (y1==null||y1==undefined||isNaN(y1)) {return}
if (x2==null||x2==undefined||isNaN(x2)) {return}
if (y2==null||y2==undefined||isNaN(y2)) {return}
if (color==null||color==undefined||color=="") {color="black"}
if (lineWidth==null||lineWidth==undefined||isNaN(lineWidth)) {lineWidth=1}
ctx=canvas.getContext("2d");
ctx.strokeStyle=color;
ctx.lineWidth=lineWidth;
ctx.beginPath();
ctx.moveTo(x1,y1);
ctx.lineTo(x2,y2);
ctx.stroke();
ctx.closePath();
}
function point3D(x,y,z) {
if (!points3D) {this.points3D=new Array()}
this.points3D.push({x:x,y:y,z:z,t:"P"});
}
function line3D(x1,y1,z1,x2,y2,z2) {
if (!points3D) {this.points3D=new Array()}
this.points3D.push({x:x1,y:y1,z:z1,t:"B"});
this.points3D.push({x:x2,y:y2,z:z2,t:"E"});
}
function polyLine3D(com) {
if (!points3D) {this.points3D=new Array()}
a=points3D.length;
com+=";";
while(com.indexOf(";")!=-1) {
comX=eval(com.substring(0,com.indexOf(",")));
com=com.substring(com.indexOf(",")+1);
comY=eval(com.substring(0,com.indexOf(",")));
com=com.substring(com.indexOf(",")+1);
comZ=eval(com.substring(0,com.indexOf(";")));
this.points3D.push({x:comX,y:comY,z:comZ,t:""});
com=com.substring(com.indexOf(";")+1);
}
b=points3D.length-1;
points3D[a]={x:points3D[a].x,y:points3D[a].y,z:points3D[a].z,t:"B"};
points3D[b]={x:points3D[b].x,y:points3D[b].y,z:points3D[b].z,t:"E"};
}
function cube(x1,y1,z1,x2,y2,z2) {
if (!points3D) {this.points3D=new Array()}
this.x1=x1;
this.y1=y1;
this.z1=z1;
this.x2=x2;
this.y2=y2;
this.z2=z2;
polyLine3D("x2,y1,z1;x2,y2,z1;x1,y2,z1;x1,y1,z1");
polyLine3D("x1,y1,z1;x2,y1,z1;x2,y1,z2;x1,y1,z2;x1,y1,z1");
polyLine3D("x1,y1,z2;x1,y2,z2;x1,y2,z1");
polyLine3D("x1,y2,z2;x2,y2,z2;x2,y2,z1");
polyLine3D("x2,y2,z2;x2,y1,z2");
}
function draw(mW,mH,alfa,beta,gama,vx,vy,vz,K,d) {
cls($("canvas"),"white");
alfa=(parseFloat(alfa+360)%719)-359;
beta=(parseFloat(beta+360)%719)-359;
gama=(parseFloat(gama+360)%719)-359;
vx=parseFloat(vx);
vy=parseFloat(vy);
vz=parseFloat(vz);
K=parseFloat(K);
d=parseFloat(d);
wspolczynniki(alfa,beta,gama);
points2D=new Array();
for (i=0; i<this.points3D.length; i++) {
transform=odwzorowanie(this.points3D[i].x,this.points3D[i].y,this.points3D[i].z);
points2D.push({x:transform.x,y:transform.y,t:this.points3D[i].t});
}
for (i=0; i<points2D.length-1; i++) {
if (points2D[i].t=="P") {line(points2D[i].x,points2D[i].y,points2D[i].x,points2D[i].y)}
if (points2D[i].t=="B"||points2D[i].t=="") {line(points2D[i].x,points2D[i].y,points2D[i+1].x,points2D[i+1].y)}
if (points2D[i].t=="E") {ctx.lineTo(points2D[i].x,points2D[i].y);ctx.stroke();ctx.closePath()}
}
function wspolczynniki(alfa,beta,gama) {
wa=alfa*Math.PI/180;
ca=Math.cos(wa);
sa=Math.sin(wa);
wb=beta*Math.PI/180;
cb=Math.cos(wb);
sb=Math.sin(wb);
wc=gama*Math.PI/180;
cc=Math.cos(wc);
sc=Math.sin(wc);
}
function odwzorowanie(pX,pY,pZ) {
x1=pX;
y1=ca*pY-sa*pZ;
z1=sa*pY+ca*pZ;

x2=cb*x1-sb*z1;
y2=y1;
z2=sb*x1+cb*z1;

x3=cc*x2-sc*y2;
y3=sc*x2+cc*y2;
z3=z2;

x4=x3+vx;
y4=y3+vy;
z4=z3+vz;

u=-x4/y4*d;
v=-z4/y4*d;
kol=mW/2+K*u;
wiersz=mH/2-K*v;
return {x:kol,y:wiersz};
}
}
polyLine3D("0,0,-1;-1,0,-2;0,0,-7;1,0,-2;0,0,-1");
polyLine3D("0,0,-1;0,-1,-2;0,0,-7;0,1,-2;0,0,-1");
polyLine3D("-1,0,-2;0,-1,-2;1,0,-2;0,1,-2;-1,0,-2");

polyLine3D("0,0,1;-1,0,2;0,0,7;1,0,2;0,0,1");
polyLine3D("0,0,1;0,-1,2;0,0,7;0,1,2;0,0,1");
polyLine3D("-1,0,2;0,-1,2;1,0,2;0,1,2;-1,0,2");

polyLine3D("0,-1,0;-1,-2,0;0,-7,0;1,-2,0;0,-1,0");
polyLine3D("0,-1,0;0,-2,-1;0,-7,0;0,-2,1;0,-1,0");
polyLine3D("-1,-2,0;0,-2,-1;1,-2,0;0,-2,1;-1,-2,0");

polyLine3D("0,1,0;-1,2,0;0,7,0;1,2,0;0,1,0");
polyLine3D("0,1,0;0,2,-1;0,7,0;0,2,1;0,1,0");
polyLine3D("-1,2,0;0,2,-1;1,2,0;0,2,1;-1,2,0");

polyLine3D("-1,0,0;-2,0,1;-7,0,0;-2,0,-1;-1,0,0");
polyLine3D("-1,0,0;-2,1,0;-7,0,0;-2,-1,0;-1,0,0");
polyLine3D("-2,-1,0;-2,0,-1;-2,1,0;-2,0,1;-2,-1,0");

polyLine3D("1,0,0;2,0,1;7,0,0;2,0,-1;1,0,0");
polyLine3D("1,0,0;2,1,0;7,0,0;2,-1,0;1,0,0");
polyLine3D("2,-1,0;2,0,-1;2,1,0;2,0,1;2,-1,0");

polyLine3D("-0.75,0,0;0,0,-0.75;0.75,0,0;0,0,0.75;-0.75,0,0");
polyLine3D("0,-0.75,0;0,0,-0.75;0,0.75,0;0,0,0.75;0,-0.75,0");
polyLine3D("-0.75,0,0;0,-0.75,0;0.75,0,0;0,0.75,0;-0.75,0,0");

/*
tmp="objX=[";
for (i=0; i<points3D.length; i++) tmp+=points3D[i].x+",";
tmp=tmp.substring(0,tmp.length-1)+"]<br>objY=[";
for (i=0; i<points3D.length; i++) tmp+=points3D[i].y+",";
tmp=tmp.substring(0,tmp.length-1)+"]<br>objZ=[";
for (i=0; i<points3D.length; i++) tmp+=points3D[i].z+",";
tmp=tmp.substring(0,tmp.length-1)+"]";
document.write(tmp);
*/

ia=0;
ib=0;
ig=0;
ra=Math.round((4*Math.random()-2)*100)/100;
rb=Math.round((4*Math.random()-2)*100)/100;
rg=Math.round((4*Math.random()-2)*100)/100;
fpsLimit=1000/24;
stop=new Date().getTime();
draw(w,h,ia,ib,ig,0,50,0,10.85,250);
setInterval(function() {
start=new Date().getTime();
draw(w,h,ia,ib,ig,0,50,0,10.85,250);
ia+=ra;
ib+=rb;
ig+=rg;
        fpsB=new Date().getMilliseconds();
        fps[fpsB]=1;
        if (fpsB<fpsA) {
          for (fpsA; fpsA<1000; fpsA++) fps[fpsA]=0;
          fpsA=fpsA%1000;
        }
        for (fpsA; fpsA<fpsB; fpsA++) fps[fpsA]=0;
        fpsA=fpsB+1;
        fpsA=fpsA%1000;
        fpsCnt=fps.sum();
        avg=(avg+fps.sum())/2;
        avgB=Math.round(avg*100).toString();
        avgB=avgB.substr(0,avgB.length-2)+"."+avgB.substr(-2,2);
stop=new Date().getTime();
$("info").innerHTML="Czas dzia³ania funkcji: "+(stop-start)+" ms<br \/>FPS: "+fpsCnt;
},fpsLimit);
</script>
</body>
</html>